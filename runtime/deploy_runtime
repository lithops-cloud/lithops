#!/usr/bin/env python3
import click
import os
import json
from pywren_ibm_cloud import wrenconfig
from pywren_ibm_cloud.storage import storage
from pywren_ibm_cloud.cf_connector import CloudFunctions
from pywren_ibm_cloud.wrenconfig import CF_ACTION_NAME_DEFAULT


@click.group(invoke_without_command=True)
@click.pass_context
def cli(ctx):
    if ctx.invoked_subcommand is None:
        default()


def create_zip_action():
    print('Creating action zip')

    if not os.path.isfile('../pywren/__main__.py'):
        os.symlink('../pywren/pywren_ibm_cloud/action/__main__.py', '../pywren/__main__.py')
    cmd = 'cd ../pywren; zip -FSr ../runtime/ibmcf_pywren.zip __main__.py pywren_ibm_cloud/ -x "*__pycache__*"'
    res = os.system(cmd)
    if res != 0:
        exit()
    os.remove('../pywren/__main__.py')


def create_runtime(image_name):

    runtime_meta = dict()

    # Extract installed Python modules
    cmd = "docker run {} python -c 'import pkgutil; \
                                    mods = list(pkgutil.iter_modules()); \
                                    print([entry for entry in sorted([[mod, is_pkg] for _,mod,is_pkg in mods])])'".format(image_name)

    runtime_meta['preinstalls'] = eval(os.popen(cmd).read().strip())

    # Determin Python version of the new runtime
    cmd = "docker run {} python -c 'import sys; v = sys.version_info; print(str(v[0])+\".\"+str(v[1]))'".format(image_name)
    runtime_meta['python_ver'] = os.popen(cmd).read().strip()

    # Create runtime_name from image_name
    username, appname = image_name.split('/')
    runtime_name = appname.replace(':', '_')

    # Load PyWren config from ~/.pywren_config
    config = wrenconfig.default()

    # Create storage_handler to upload modules file
    storage_config = wrenconfig.extract_storage_config(config)
    pywren_container = storage_config['storage_bucket']
    storage_handler = storage.Storage(storage_config)
    key = os.path.join('runtimes', runtime_name+'.meta.json')
    storage_handler.put_object(pywren_container, key, json.dumps(runtime_meta))

    # Create zipped PyWren action
    create_zip_action()

    # Upload zipped PyWren action
    print('Uploading action')
    with open("ibmcf_pywren.zip", "rb") as action_zip:
        action_bin = action_zip.read()
        cf_client = CloudFunctions(config['ibm_cf'])
        cf_client.create_action(runtime_name, memory=512, timeout=600000,
                                code=action_bin, kind='blackbox', image=image_name)


@cli.command('create')
@click.argument('image_name')
def create(image_name):

    print('Creating a new docker image from the Dockerfile')
    print('Docker image name: {}'.format(image_name))

    cmd = 'docker build -t {} .'.format(image_name)
    res = os.system(cmd)
    if res != 0:
        exit()

    cmd = 'docker push {}'.format(image_name)
    res = os.system(cmd)
    if res != 0:
        exit()

    create_runtime(image_name)

    print('All done!')


@cli.command('clone')
@click.argument('image_name')
def clone(image_name):

    print('Cloning docker image {}'.format(image_name))

    cmd = 'docker pull {}'.format(image_name)
    res = os.system(cmd)
    if res != 0:
        exit()

    create_runtime(image_name)

    print('All done!')


def default():
    config = wrenconfig.default()

    # Create zipped PyWren action
    create_zip_action()

    # Upload zipped PyWren action
    print('Uploading action')
    with open("ibmcf_pywren.zip", "rb") as action_zip:
        action_bin = action_zip.read()
        cf_client = CloudFunctions(config['ibm_cf'])
        runtime_name = CF_ACTION_NAME_DEFAULT
        cf_client.create_action(runtime_name, memory=512, timeout=600000, code=action_bin)


if __name__ == "__main__":
    cli()
